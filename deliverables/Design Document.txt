Design Document
---------------

Algorithm: Buckshot (Unsupervised)

Seth Menghi
Nazli, Data Mining


***********buckshot.cfg needs to be set to where the adult-big.arff folder is. checkout
***********There needs to be a graphs folder in the directory where buckshot.py is running as well
Breakdown of Algorithm:
    1. Convert .arff to .csv for pandas

    2. Preprocess the data
        (a) Replace missing values with mean (numerical), mode (categorical)
        (b) Normalize the numerical data by (data - mean(data)) / (max(data) - min(data))

    3. Hierarchical Cluster the data into K clusters
        (a) Creates a similarity matrix of sqrt(n) random samples with Euclidean Distance
            (i) I do not use class_label when calculating the distance as that would effect the groupings to be too pure.
                That wouldn't tell us much about the class label that we didn't know. I want to see how pure the class is when
                the class_label is unknown. (Unsupervised)
                See: Buckshot.init_matrix()
        (b) Merges two clusters with the closest centroids
                See: Cluster.merge_clusters()
        (c) Recalculates similarity matrix using averages of clusters
                 See: Buckshot.update_matrix()

    4. K-Means
        (a) For each of the remaining samples (n-sqrt(n)) as i:
            (i) Find the distance between i and the mean of each cluster's centroid
            (ii) Add that value into that cluster
                See: Cluster.add(cluster)

    5. Measuring Quality
        (a) Take the average of the ratios of the class label in each cluster

    6. Inter-Cluster Distance
        (a) Find the intra-cluster distance
                The sum of the euclidean squared distance
                See: Cluster.intra_distance()

    7. Graphs + plots
        (a) I included the ability to plot graphs if there is a graphs folder.
            It is nice to visualize the data with the centroids and the amount of values per class.
        (b) YOU NEED TO CREATE A .../buckshot/graphs folder for this to run.



HAC:
    Hac(): Below is an in-order snippet of cluster's coordinates in the array and
    It is obvious that the distance keeps increasing when clusters are merged,
    which shows that it is correctly choosing the smallest distance.
        Min = similiarity matrix coordinates
        Distance = distance between two points

        Min: ( 2 , 53 )    Distance:  0.027397260274
        Min: ( 2 , 10 )    Distance:  0.0510204081633
        Min: ( 81 , 198 )  Distance:  0.0539713175323
        Min: ( 194 , 209 ) Distance:  0.0748700309284
        Min: ( 93 , 121 )  Distance:  0.134149886639
        Min: ( 0 , 162 )   Distance:  0.150684931507
        Min: ( 84 , 87 )   Distance:  0.164383561644
        Min: ( 78 , 161 )  Distance:  0.165548089852
        Min: ( 43 , 69 )   Distance:  0.18061757765
        Min: ( 47 , 134 )  Distance:  0.189703127878
